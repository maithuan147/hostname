{"version":3,"sources":["pages/Page1/index.js","pages/Page2/index.js","pages/Page3/index.js","App.js","serviceWorker.js","index.js"],"names":["Page1","id","name","map","item","onClick","console","log","key","Page2","Page3","App","exact","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6LA+BeA,EA5BD,WAeZ,OACE,6BAfW,CACX,CAAEC,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,IAAKC,KAAM,OACjB,CAAED,GAAI,IAAKC,KAAM,UAaTC,KAAI,SAACC,GAAD,OACR,yBAAKC,SATIJ,EASWG,EARjB,WACLE,QAAQC,IAAIN,KAOiBO,IAAKJ,EAAKH,IAArC,qBACUG,EAAKF,MAVP,IAACD,KAcX,4BAAQI,QAjBE,cAiBV,WCpBSI,EAJD,WACZ,OAAO,uCCGMC,EAJD,WACZ,OAAO,yDCIM,SAASC,IACtB,OACE,oCACE,kBAAC,IAAD,KACG,IACD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWd,IACzC,kBAAC,IAAD,CAAOa,KAAK,kBAAkBC,UAAWL,IACzC,kBAAC,IAAD,CAAOI,KAAK,kBAAkBC,UAAWJ,KAE3C,kBAAC,IAAD,CAAMK,GAAG,KAAT,SAPF,IAO4B,kBAAC,IAAD,CAAMA,GAAG,UAAT,SAA+B,IACzD,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACQ,KCPIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAACX,EAAD,MAASY,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.b233b474.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { history } from \"../../utils/History\";\r\n\r\nconst Page1 = () => {\r\n  const list = [\r\n    { id: 100, name: \"thuan\" },\r\n    { id: 101, name: \"huy\" },\r\n    { id: 102, name: \"hoang\" },\r\n  ];\r\n  const page3 = () => {\r\n    // history.push(\"/page3\");\r\n  };\r\n  const getId = (id) => {\r\n    return () => {\r\n      console.log(id);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {list.map((item) => (\r\n        <div onClick={getId(item)} key={item.id}>\r\n          Đây là {item.name}\r\n        </div>\r\n      ))}\r\n\r\n      <button onClick={page3}>Page3</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page1;\r\n","import React from \"react\";\r\n\r\nconst Page2 = () => {\r\n  return <div>Page2</div>;\r\n};\r\n\r\nexport default Page2;\r\n","import React from \"react\";\r\n\r\nconst Page3 = () => {\r\n  return <div>Đây là Page3</div>;\r\n};\r\n\r\nexport default Page3;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Page1 from \"./pages/Page1\";\nimport Page2 from \"./pages/Page2\";\nimport Page3 from \"./pages/Page3\";\n// import { history } from \"./utils/History\";\n\nexport default function App() {\n  return (\n    <>\n      <Router>\n        {\" \"}\n        <Switch>\n          <Route exact path=\"/hostname\" component={Page1} />\n          <Route path=\"/hostname/page2\" component={Page2} />\n          <Route path=\"/hostname/page3\" component={Page3} />\n        </Switch>\n        <Link to=\"/\">Page1</Link> <Link to=\"/page2\">page2</Link>{\" \"}\n        <Link to=\"/page3\">page3</Link>\n      </Router>{\" \"}\n\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\n// import \"./i18n\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}